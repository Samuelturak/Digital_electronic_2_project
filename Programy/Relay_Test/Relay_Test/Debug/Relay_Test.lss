
Relay_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d5d  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f8  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bf  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000472  00000000  00000000  00002711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_18>
  4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 2b       	or	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_read>:
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	//I.
	if ((*reg_name & (1<<pin_num)) == 0) {
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_read+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_read+0x8>
 122:	80 fd       	sbrc	r24, 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GPIO_read+0x18>
		return 0;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
	}
	else {
		return 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
	}
	//II.
	//return(*reg_name & (1<<pin_num));
	// III.
	// return(bit_is_set(*reg_name,pin_num));
 12c:	08 95       	ret

0000012e <main>:
#include "timer.h"          // Timer library for AVR-GCC

int main(void)
{
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 12e:	87 e6       	ldi	r24, 0x67	; 103
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 59 01 	call	0x2b2	; 0x2b2 <uart_init>
	
	// Configure output PINs
	GPIO_config_output(&DDRB, RELAY_PIN1);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	84 e2       	ldi	r24, 0x24	; 36
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	// GPIO_config_output(&DDRB, RELAY_PIN2);
	GPIO_write_high(&PORTB, RELAY_PIN1);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
	// GPIO_write_low(&PORTB, RELAY_PIN2);
	
	// Configure input PIN
	GPIO_config_input_pullup(&DDRD, BUTTON_PIN);
 14a:	65 e0       	ldi	r22, 0x05	; 5
 14c:	8a e2       	ldi	r24, 0x2A	; 42
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	
	// Input start string
	uart_puts("RELAY STATUS:\r\n");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 89 01 	call	0x312	; 0x312 <uart_puts>
	
    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
 15c:	e1 e8       	ldi	r30, 0x81	; 129
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8a 7f       	andi	r24, 0xFA	; 250
 164:	80 83       	st	Z, r24
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 16c:	ef e6       	ldi	r30, 0x6F	; 111
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	81 60       	ori	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
	
	// Enable interrupts by setting the global interrupt mask
    sei();
 176:	78 94       	sei
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x4a>

0000017a <__vector_13>:

    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	if (GPIO_read(&PIND, BUTTON_PIN) == 0) {
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	89 e2       	ldi	r24, 0x29	; 41
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 1a6:	81 11       	cpse	r24, r1
 1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <__vector_13+0x4c>
		uart_puts("Relay_1: ON; Relay_2: ON");
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 89 01 	call	0x312	; 0x312 <uart_puts>
		uart_puts("\r\n");
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 89 01 	call	0x312	; 0x312 <uart_puts>
		GPIO_write_low(&PORTB, RELAY_PIN1);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <__vector_13+0x66>
		// GPIO_write_high(&PORTB, RELAY_PIN2);
	}
	else {
		uart_puts("Relay_1: ON;	Relay_2: ON");
 1c6:	89 e2       	ldi	r24, 0x29	; 41
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 89 01 	call	0x312	; 0x312 <uart_puts>
		uart_puts("\r\n");
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 89 01 	call	0x312	; 0x312 <uart_puts>
		GPIO_write_high(&PORTB, RELAY_PIN1);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		// GPIO_write_low(&PORTB, RELAY_PIN2);
	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21e:	8c 71       	andi	r24, 0x1C	; 28
 220:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 224:	ef 5f       	subi	r30, 0xFF	; 255
 226:	ef 71       	andi	r30, 0x1F	; 31
 228:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 22c:	e9 17       	cp	r30, r25
 22e:	39 f0       	breq	.+14     	; 0x23e <__vector_18+0x3c>
 230:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e9 5b       	subi	r30, 0xB9	; 185
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	20 83       	st	Z, r18
 23c:	01 c0       	rjmp	.+2      	; 0x240 <__vector_18+0x3e>
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 244:	89 2b       	or	r24, r25
 246:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_19>:
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 274:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 278:	98 17       	cp	r25, r24
 27a:	69 f0       	breq	.+26     	; 0x296 <__vector_19+0x38>
 27c:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 280:	ef 5f       	subi	r30, 0xFF	; 255
 282:	ef 71       	andi	r30, 0x1F	; 31
 284:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	e9 59       	subi	r30, 0x99	; 153
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_19+0x42>
 296:	e1 ec       	ldi	r30, 0xC1	; 193
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 83       	st	Z, r24
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <uart_init>:
 2b2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 2b6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 2ba:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 2be:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 2c2:	28 2f       	mov	r18, r24
 2c4:	39 2f       	mov	r19, r25
 2c6:	33 23       	and	r19, r19
 2c8:	1c f4       	brge	.+6      	; 0x2d0 <uart_init+0x1e>
 2ca:	22 e0       	ldi	r18, 0x02	; 2
 2cc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d0:	90 78       	andi	r25, 0x80	; 128
 2d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2da:	88 e9       	ldi	r24, 0x98	; 152
 2dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2e6:	08 95       	ret

000002e8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2e8:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2f0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 2f4:	29 17       	cp	r18, r25
 2f6:	e1 f3       	breq	.-8      	; 0x2f0 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2f8:	e2 2f       	mov	r30, r18
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	e9 59       	subi	r30, 0x99	; 153
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 302:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 306:	e1 ec       	ldi	r30, 0xC1	; 193
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	80 83       	st	Z, r24
 310:	08 95       	ret

00000312 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
    while (*s)
 318:	03 c0       	rjmp	.+6      	; 0x320 <uart_puts+0xe>
        uart_putc(*s++);
 31a:	21 96       	adiw	r28, 0x01	; 1
 31c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 320:	88 81       	ld	r24, Y
 322:	81 11       	cpse	r24, r1
 324:	fa cf       	rjmp	.-12     	; 0x31a <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
