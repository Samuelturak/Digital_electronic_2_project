
CSM_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800112  00800112  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b55  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_18>
  4c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_init>
	
	// Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1<<REFS0); ADMUX &= ~(1<<REFS1); 
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	8f 77       	andi	r24, 0x7F	; 127
  bc:	80 83       	st	Z, r24

    // Set input channel to ADC0
	ADMUX &= ~(1<<MUX0); ADMUX &= ~(1<<MUX1); ADMUX &= ~(1<<MUX2); ADMUX &= ~(1<<MUX3); 
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	80 81       	ld	r24, Z
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	80 83       	st	Z, r24
	
    // Enable ADC module
	ADCSRA |= (1<<ADEN);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24

    // Set clock prescaler to 128
	ADCSRA |= (1<<ADPS0); ADCSRA |= (1<<ADPS1); ADCSRA |= (1<<ADPS2);
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	80 81       	ld	r24, Z
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	80 83       	st	Z, r24
	
	// Input start string
	uart_puts("Soil moisture:\r\n");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <uart_puts>
	
    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8a 7f       	andi	r24, 0xFA	; 250
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 110:	ef e6       	ldi	r30, 0x6F	; 111
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	
	// Enable interrupts by setting the global interrupt mask
    sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x76>

0000011e <__vector_13>:

    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_21>:

ISR(ADC_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <__vector_21+0x28>
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	static uint16_t value = 0;
	char uart_str[3] = "";
 176:	1a 82       	std	Y+2, r1	; 0x02
 178:	19 82       	std	Y+1, r1	; 0x01
 17a:	1b 82       	std	Y+3, r1	; 0x03
	
	value = ADC;
 17c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 180:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 184:	4a e0       	ldi	r20, 0x0A	; 10
 186:	be 01       	movw	r22, r28
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__itoa_ncheck>
	itoa(value, uart_str, 10);
	uart_puts(uart_str);
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	0e 94 6e 01 	call	0x2dc	; 0x2dc <uart_puts>
	uart_puts("\r\n");
 198:	8e e0       	ldi	r24, 0x0E	; 14
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <uart_puts>
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1e4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1e8:	8c 71       	andi	r24, 0x1C	; 28
 1ea:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UART_RxHead>
 1ee:	ef 5f       	subi	r30, 0xFF	; 255
 1f0:	ef 71       	andi	r30, 0x1F	; 31
 1f2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <UART_RxTail>
 1f6:	e9 17       	cp	r30, r25
 1f8:	39 f0       	breq	.+14     	; 0x208 <__vector_18+0x3c>
 1fa:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <UART_RxHead>
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e9 5e       	subi	r30, 0xE9	; 233
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	20 83       	st	Z, r18
 206:	01 c0       	rjmp	.+2      	; 0x20a <__vector_18+0x3e>
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 20e:	89 2b       	or	r24, r25
 210:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_19>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <UART_TxHead>
 23e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <UART_TxTail>
 242:	98 17       	cp	r25, r24
 244:	69 f0       	breq	.+26     	; 0x260 <__vector_19+0x38>
 246:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <UART_TxTail>
 24a:	ef 5f       	subi	r30, 0xFF	; 255
 24c:	ef 71       	andi	r30, 0x1F	; 31
 24e:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <UART_TxTail>
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	e9 5c       	subi	r30, 0xC9	; 201
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	80 81       	ld	r24, Z
 25a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25e:	05 c0       	rjmp	.+10     	; 0x26a <__vector_19+0x42>
 260:	e1 ec       	ldi	r30, 0xC1	; 193
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8f 7d       	andi	r24, 0xDF	; 223
 268:	80 83       	st	Z, r24
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <uart_init>:
 27c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <UART_TxHead>
 280:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <UART_TxTail>
 284:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UART_RxHead>
 288:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <UART_RxTail>
 28c:	28 2f       	mov	r18, r24
 28e:	39 2f       	mov	r19, r25
 290:	33 23       	and	r19, r19
 292:	1c f4       	brge	.+6      	; 0x29a <uart_init+0x1e>
 294:	22 e0       	ldi	r18, 0x02	; 2
 296:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 29a:	90 78       	andi	r25, 0x80	; 128
 29c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2a4:	88 e9       	ldi	r24, 0x98	; 152
 2a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2b0:	08 95       	ret

000002b2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2b2:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <UART_TxHead>
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <UART_TxTail>
 2be:	29 17       	cp	r18, r25
 2c0:	e1 f3       	breq	.-8      	; 0x2ba <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2c2:	e2 2f       	mov	r30, r18
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e9 5c       	subi	r30, 0xC9	; 201
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2cc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2d0:	e1 ec       	ldi	r30, 0xC1	; 193
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
    while (*s)
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <uart_puts+0xe>
        uart_putc(*s++);
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 2ea:	88 81       	ld	r24, Y
 2ec:	81 11       	cpse	r24, r1
 2ee:	fa cf       	rjmp	.-12     	; 0x2e4 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <__itoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27
 2f8:	4a 30       	cpi	r20, 0x0A	; 10
 2fa:	31 f4       	brne	.+12     	; 0x308 <__itoa_ncheck+0x12>
 2fc:	99 23       	and	r25, r25
 2fe:	22 f4       	brpl	.+8      	; 0x308 <__itoa_ncheck+0x12>
 300:	bd e2       	ldi	r27, 0x2D	; 45
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	0c 94 87 01 	jmp	0x30e	; 0x30e <__utoa_common>

0000030c <__utoa_ncheck>:
 30c:	bb 27       	eor	r27, r27

0000030e <__utoa_common>:
 30e:	fb 01       	movw	r30, r22
 310:	55 27       	eor	r21, r21
 312:	aa 27       	eor	r26, r26
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	a4 17       	cp	r26, r20
 31c:	10 f0       	brcs	.+4      	; 0x322 <__utoa_common+0x14>
 31e:	a4 1b       	sub	r26, r20
 320:	83 95       	inc	r24
 322:	50 51       	subi	r21, 0x10	; 16
 324:	b9 f7       	brne	.-18     	; 0x314 <__utoa_common+0x6>
 326:	a0 5d       	subi	r26, 0xD0	; 208
 328:	aa 33       	cpi	r26, 0x3A	; 58
 32a:	08 f0       	brcs	.+2      	; 0x32e <__utoa_common+0x20>
 32c:	a9 5d       	subi	r26, 0xD9	; 217
 32e:	a1 93       	st	Z+, r26
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	79 f7       	brne	.-34     	; 0x312 <__utoa_common+0x4>
 334:	b1 11       	cpse	r27, r1
 336:	b1 93       	st	Z+, r27
 338:	11 92       	st	Z+, r1
 33a:	cb 01       	movw	r24, r22
 33c:	0c 94 a0 01 	jmp	0x340	; 0x340 <strrev>

00000340 <strrev>:
 340:	dc 01       	movw	r26, r24
 342:	fc 01       	movw	r30, r24
 344:	67 2f       	mov	r22, r23
 346:	71 91       	ld	r23, Z+
 348:	77 23       	and	r23, r23
 34a:	e1 f7       	brne	.-8      	; 0x344 <strrev+0x4>
 34c:	32 97       	sbiw	r30, 0x02	; 2
 34e:	04 c0       	rjmp	.+8      	; 0x358 <strrev+0x18>
 350:	7c 91       	ld	r23, X
 352:	6d 93       	st	X+, r22
 354:	70 83       	st	Z, r23
 356:	62 91       	ld	r22, -Z
 358:	ae 17       	cp	r26, r30
 35a:	bf 07       	cpc	r27, r31
 35c:	c8 f3       	brcs	.-14     	; 0x350 <strrev+0x10>
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
