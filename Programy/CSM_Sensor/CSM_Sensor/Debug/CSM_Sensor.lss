
CSM_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800112  00800112  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8f  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000472  00000000  00000000  00001b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000533  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e6  00000000  00000000  00002713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002bf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_18>
  4c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_input_nopull>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_input_nopull+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_input_nopull+0xa>
  b8:	20 95       	com	r18
  ba:	82 23       	and	r24, r18
  bc:	80 83       	st	Z, r24
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	28 23       	and	r18, r24
  c2:	21 83       	std	Z+1, r18	; 0x01
  c4:	08 95       	ret

000000c6 <GPIO_read>:
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	//I.
	if ((*reg_name & (1<<pin_num)) == 0) {
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <GPIO_read+0xc>
  ce:	95 95       	asr	r25
  d0:	87 95       	ror	r24
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <GPIO_read+0x8>
  d6:	80 fd       	sbrc	r24, 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_read+0x18>
		return 0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret
	}
	else {
		return 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
	}
	//II.
	//return(*reg_name & (1<<pin_num));
	// III.
	// return(bit_is_set(*reg_name,pin_num));
  e0:	08 95       	ret

000000e2 <main>:


int main(void)
{
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 2c 01 	call	0x258	; 0x258 <uart_init>
	
	// Configure A0 PIN as input
	GPIO_config_input_nopull(&DDRC, SENSOR_OUT);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	87 e2       	ldi	r24, 0x27	; 39
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_input_nopull>
	
	// Input start string
	uart_puts("Soil moisture:\r\n");
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_puts>
	
    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_1s();
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8c 7f       	andi	r24, 0xFC	; 252
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	
	// Enable interrupts by setting the global interrupt mask
    sei();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x36>

0000011a <__vector_13>:

    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect) {
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <__vector_13+0x28>
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	static uint8_t humid = 0;
	char uart_str[3] = "000";
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	8b 83       	std	Y+3, r24	; 0x03
	
	humid = GPIO_read(&PINC, SENSOR_OUT);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	86 e2       	ldi	r24, 0x26	; 38
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 15e:	4a e0       	ldi	r20, 0x0A	; 10
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__itoa_ncheck>
	itoa(humid, uart_str, 10);
	uart_puts(uart_str);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_puts>
	uart_puts("\r\n");
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_puts>
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	8c 71       	andi	r24, 0x1C	; 28
 1c6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UART_RxHead>
 1ca:	ef 5f       	subi	r30, 0xFF	; 255
 1cc:	ef 71       	andi	r30, 0x1F	; 31
 1ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <UART_RxTail>
 1d2:	e9 17       	cp	r30, r25
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <__vector_18+0x3c>
 1d6:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <UART_RxHead>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e9 5e       	subi	r30, 0xE9	; 233
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	20 83       	st	Z, r18
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <__vector_18+0x3e>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 1ea:	89 2b       	or	r24, r25
 1ec:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_19>:
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <UART_TxHead>
 21a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <UART_TxTail>
 21e:	98 17       	cp	r25, r24
 220:	69 f0       	breq	.+26     	; 0x23c <__vector_19+0x38>
 222:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <UART_TxTail>
 226:	ef 5f       	subi	r30, 0xFF	; 255
 228:	ef 71       	andi	r30, 0x1F	; 31
 22a:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <UART_TxTail>
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e9 5c       	subi	r30, 0xC9	; 201
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 81       	ld	r24, Z
 236:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23a:	05 c0       	rjmp	.+10     	; 0x246 <__vector_19+0x42>
 23c:	e1 ec       	ldi	r30, 0xC1	; 193
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	80 83       	st	Z, r24
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <uart_init>:
 258:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <UART_TxHead>
 25c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <UART_TxTail>
 260:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UART_RxHead>
 264:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <UART_RxTail>
 268:	28 2f       	mov	r18, r24
 26a:	39 2f       	mov	r19, r25
 26c:	33 23       	and	r19, r19
 26e:	1c f4       	brge	.+6      	; 0x276 <uart_init+0x1e>
 270:	22 e0       	ldi	r18, 0x02	; 2
 272:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 276:	90 78       	andi	r25, 0x80	; 128
 278:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 27c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 280:	88 e9       	ldi	r24, 0x98	; 152
 282:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 28c:	08 95       	ret

0000028e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 28e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <UART_TxHead>
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 296:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <UART_TxTail>
 29a:	29 17       	cp	r18, r25
 29c:	e1 f3       	breq	.-8      	; 0x296 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 29e:	e2 2f       	mov	r30, r18
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e9 5c       	subi	r30, 0xC9	; 201
 2a4:	fe 4f       	sbci	r31, 0xFE	; 254
 2a6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2a8:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2ac:	e1 ec       	ldi	r30, 0xC1	; 193
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret

000002b8 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
    while (*s)
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <uart_puts+0xe>
        uart_putc(*s++);
 2c0:	21 96       	adiw	r28, 0x01	; 1
 2c2:	0e 94 47 01 	call	0x28e	; 0x28e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 2c6:	88 81       	ld	r24, Y
 2c8:	81 11       	cpse	r24, r1
 2ca:	fa cf       	rjmp	.-12     	; 0x2c0 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <__itoa_ncheck>:
 2d2:	bb 27       	eor	r27, r27
 2d4:	4a 30       	cpi	r20, 0x0A	; 10
 2d6:	31 f4       	brne	.+12     	; 0x2e4 <__itoa_ncheck+0x12>
 2d8:	99 23       	and	r25, r25
 2da:	22 f4       	brpl	.+8      	; 0x2e4 <__itoa_ncheck+0x12>
 2dc:	bd e2       	ldi	r27, 0x2D	; 45
 2de:	90 95       	com	r25
 2e0:	81 95       	neg	r24
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__utoa_common>

000002e8 <__utoa_ncheck>:
 2e8:	bb 27       	eor	r27, r27

000002ea <__utoa_common>:
 2ea:	fb 01       	movw	r30, r22
 2ec:	55 27       	eor	r21, r21
 2ee:	aa 27       	eor	r26, r26
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	aa 1f       	adc	r26, r26
 2f6:	a4 17       	cp	r26, r20
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__utoa_common+0x14>
 2fa:	a4 1b       	sub	r26, r20
 2fc:	83 95       	inc	r24
 2fe:	50 51       	subi	r21, 0x10	; 16
 300:	b9 f7       	brne	.-18     	; 0x2f0 <__utoa_common+0x6>
 302:	a0 5d       	subi	r26, 0xD0	; 208
 304:	aa 33       	cpi	r26, 0x3A	; 58
 306:	08 f0       	brcs	.+2      	; 0x30a <__utoa_common+0x20>
 308:	a9 5d       	subi	r26, 0xD9	; 217
 30a:	a1 93       	st	Z+, r26
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	79 f7       	brne	.-34     	; 0x2ee <__utoa_common+0x4>
 310:	b1 11       	cpse	r27, r1
 312:	b1 93       	st	Z+, r27
 314:	11 92       	st	Z+, r1
 316:	cb 01       	movw	r24, r22
 318:	0c 94 8e 01 	jmp	0x31c	; 0x31c <strrev>

0000031c <strrev>:
 31c:	dc 01       	movw	r26, r24
 31e:	fc 01       	movw	r30, r24
 320:	67 2f       	mov	r22, r23
 322:	71 91       	ld	r23, Z+
 324:	77 23       	and	r23, r23
 326:	e1 f7       	brne	.-8      	; 0x320 <strrev+0x4>
 328:	32 97       	sbiw	r30, 0x02	; 2
 32a:	04 c0       	rjmp	.+8      	; 0x334 <strrev+0x18>
 32c:	7c 91       	ld	r23, X
 32e:	6d 93       	st	X+, r22
 330:	70 83       	st	Z, r23
 332:	62 91       	ld	r22, -Z
 334:	ae 17       	cp	r26, r30
 336:	bf 07       	cpc	r27, r31
 338:	c8 f3       	brcs	.-14     	; 0x32c <strrev+0x10>
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
